@import "reset.min.less";

html {
    font-size: 100px;
    font-family: "Arial", "Microsoft YaHei", "黑体", "宋体", sans-serif;
    // font-family: "Microsoft JhengHei";
    /*640px的设计稿 1rem=100px,响应式布局就改这里就好了*/
}

html,
body {
    position: relative;
    z-index: -4;
    height: 100%;
    overflow: hidden;
    background: #F4F4F4;
}

/*container*/
.mainBox {
    position: relative;
    z-index: -3;
    margin: 0 auto;
    max-width: 640px;
    height: 100%;
    background: #fff
}


/*公共样式*/
.loadingBox,
.phoneBox,
.messageBox,
.cubeBox,
.detailBox {
    // width: 100%;
    display: none;
    height: 100%;
    position: relative;
    overflow: hidden;
}

/*LOADING BOX*/
.loadingBox {
    display: none;
    background: #000;
    text-align: center;
    color: #fff;

    .title {
        height: 1.4rem;
        width: 100%;
        position: absolute;
        left: 0;
        top: 50%;
        // margin-top: -2.2rem;
        margin-top: -2.6rem;


        h1 {
            line-height: 0.75rem;
            font-size: 0.5rem;
        }

        h3 {
            height: 0.45rem;
            margin-top: 0.2rem;
            color: #fff;
            font-size: 0.26rem;
            letter-spacing: 0.04rem;
        }
    }

    .progress {
        position: absolute;
        left: 50%;
        margin-left: -2.3rem;
        top: 50%;
        margin-top: 1.15rem;
        width: 4.6rem;
        height: 0.3rem;
        background: #fff;
        border-radius: 0.15rem;

        .current {
            position: absolute;
            left: 0;
            top: 0;
            width: 0%;
            // width: 0.3rem;
            height: 100%;
            // background: red;
            // background: -webkit-linear-gradient(45deg);
            // -webkit-background: -webkit-linear-gradient(left bottom ,#5cb85c 0% ,#5cb85c 25% ,#74c274 25%, #74c274 50%,#5cb85c 50%,#5cb85c 75%,#74c274 75%,#74c274 100%);
            background: -webkit-linear-gradient(left bottom, #5cb85c 0%, #5cb85c 25%, #74c274 25%, #74c274 50%, #5cb85c 50%, #5cb85c 75%, #74c274 75%, #74c274 100%);
            // -webkit-animation: loadingMove 0.3s linear 0s infinite both;
            animation: loadingMove 0.3s linear 0s infinite both;

            background-size: 0.3rem 0.3rem;
            border-radius: 0.15rem;

            /*给CURRENT设置一个过渡动画:当我们在JS中控制它的宽度在变化的时候,给其一个平稳的过渡动画效果(而不是生硬的改变)*/
            //给current增加过渡效果
            //transition: all 0.3s linear 0s;
            //        默认值 动画持续时间 线性  延迟时间
            transition: 0.3s;

        }
    }

}

@keyframes loadingMove {
    0% {
        background-position: 0 0;
    }

    100% {
        background-position: 0 -.3rem;
    }
}

.phoneBox {
    display: none;
    z-index: -2;
    // display: block;
    background: url('../img/zf_phoneBg.jpg');
    background-size: cover; //cover采集覆盖的意思

    //意思就是实现盒子铺满，等比铺满盒子
    .phoneTitle {
        position: absolute;
        left: 50%;
        margin-left: -1.31rem;
        top: 0.5rem;
        width: 2.62rem;
        height: 1.25rem;
        color: #fff;
        text-align: center;

        h2 {
            height: 0.8rem;
            width: 100%;
            font-size: 0.45rem;
            line-height: 0.45rem;
        }

        h3 {
            height: 0.45rem;
            width: 100%;
            font-size: 0.15rem;
            line-height: 0.15rem;
            color: #F4F4F4;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            cursor: pointer;
        }

        h3:hover {
            color: blue;
        }

        span {
            top: 1.85rem;
            line-height: 0.3rem;
            font-size: 0.3rem;
            //文字间距
            letter-spacing: 0.05rem;
            margin-top: 0.1rem;
            display: none;
        }
    }

    .answerBox {
        width: 5.2rem;
        height: 3.6rem;
        position: absolute;
        bottom: 0.3rem;
        left: 50%;
        margin-left: -2.6rem;
        color: #fff;
        background: url("../img/zf_phoneListen.png") no-repeat;
        background-size: 100% 100%;

        .markMove {
            //遮罩层效果（动画实现）
            //大小跟接听按钮一般大小
            position: absolute;
            right: -0.066rem;
            bottom: 0.459rem;
            width: 1.6rem;
            height: 1.6rem;
            border: .03rem solid #0F0;
            border-radius: 0.8rem;
            //border-radius: 50%;
            animation: answerMove 1s linear 0s infinite both;
            //这样动画效果实现了，但是 它在背景图的上方，我们应该改变它的z-index值让它居于 背景图的下方即可
            z-index: -1;
        }

        .markLink {
            .markMove; //把.markMove的东西继承过来
            z-index: 1;
            // background: red;
            border: 0;
            // border-radius:0;
            animation: null;
        }
    }

    .hangUpBox {
        position: absolute;
        bottom: .3rem;
        left: 50%;
        margin-left: -2.6rem;
        width: 5.2rem;
        height: 6.59rem;
        background: url('../img/zf_phoneDetail.png') no-repeat;
        background-size: 100% 100%;
        //=>初始位置是在PHONE的底部（看不见：溢出内容隐藏），当点击接听按钮后，控制它从底下出来即可（JS中改变样式） “我们可以基于TRANSFORM改变样式的尽量不要使用传统的样式属性，因为TRANSFORM操作开启了浏览器的硬件加速，性能更高一些”
        transform: translateY(6.89rem);
        transition: .3s;

        .markLink {
            position: absolute;
            bottom: .26rem;
            left: 50%;
            z-index: 1;
            margin-left: -.8rem;
            width: 1.6rem;
            height: 1.6rem;
        }
    }
}

@keyframes answerMove {
    from {
        transform: scale(1.2);
    }

    to {
        transform: scale(0);
    }
}

.messageBox {
    display: none;
    position: relative;

    // width: 100%;
    // height: 100%;
    background: #eaeaea;

    .warpper {
        width: 100%;
        // height: 
        position: absolute;
        top: 0.2rem;
        left: 0;
        transform: 0.3s;

        li {

            position: relative;
            max-width: 3.6rem;
            padding: 0.25rem;
            margin-bottom: 0.4rem;
            border-radius: 0.1rem;
            line-height: 0.4rem;
            font-size: 0.26rem;
            opacity: 0; //刚开始的时候让所有的li隐藏，根据需求让其出来

            //border:1px solid red;


            .pic {
                position: absolute;
                top: 0;
                width: 0.82rem;
                height: 0.82rem;
                border-radius: 50%;
            }

            .arrow {
                position: absolute;
                top: 0.2rem;
                width: 0.1rem;
                height: 0.2rem;
            }

            &.active {
                animation: messageListMove 0.3s linear 0s both;
            }

            &.self {
                float: left;
                background: #fff;
                border: 0.02rem solid #cacaca;
                margin-left: 1.25rem;

                .pic {
                    left: -1rem;
                }

                .arrow {
                    background: url('../img/zf_messageArrow1.png') no-repeat;
                    background-size: 100% 100%;
                    left: -0.1rem;
                }
            }

            &.interviewer {
                float: right;
                background: #a2e45c;
                border: 0.02rem solid #96b474;
                margin-right: 1.25rem;

                .pic {
                    right: -1rem;
                }

                .arrow {
                    background: url('../img/zf_messageArrow2.png') no-repeat;
                    background-size: 100% 100%;
                    right: -0.1rem;
                }
            }
        }


    }

    //keyBoardBox 
    .keyBoardBox {
        width: 100%;
        height: 5.16rem;
        position: absolute;
        left: 0;
        bottom: -0.54rem;
        background: url('../img/zf_messageKeyboard.png') no-repeat;
        background-size: 100% 100%;

        transform: translateY(3.7rem);
        transition: 0.3s;

        #inputText {
            border: none;
            position: absolute;
            left: 0.9rem;
            top: 0.35rem;
            // border:1px solid red;
            width: 4rem;
            height: 0.4rem;
            font-size: 0.25rem;
        }

        .submit {
            display: none;
            position: absolute;
            width: 1.49rem;
            height: 0.74rem;
            right: 0.1rem;
            bottom: 0.6rem;
            // border: 1px solid red;
            background: url('../img/zf_messageChat.png') no-repeat;
            background-size: 100% 100%;
        }


    }


}

@keyframes messageListMove {
    from {
        //透明度从0-1
        opacity: 0;
        //位置从应该所处位置向下偏移100px~正常位置
        transform: translateY(1rem);
    }

    to {
        opacity: 1;
        transform: translateY(0rem);
    }
}




/*cubeBox 基础样式*/
.cubeBox {
    background: url('../img/zf_cubeBg.jpg') no-repeat;
    background-size: cover;

    .cube {
        position: absolute;
        left: 50%;
        top: 50%;
        margin: -2.55rem 0 0 -2.55rem;
        width: 5.1rem;
        height: 5.1rem;

        li {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;

            img {
                display: block;
                width: 100%;
                height: 100%;
            }
        }
    }

}

/*cubeBox 3D动画样式*/
.cubeBox {
    @V-1: unit(5.1/2, rem);
    @V-2: -(unit(5.1/2, rem));
    //第一步：给要实现3D效果的元素的盒子容器（父级盒子）设置视距 1000-2000px之间
    perspective: 1000px;


    .cube {
        //第二步：给需要实现3D效果的元素开启3d效果模式
        transform-style: preserve-3d;

        //第三步：设置对应的3d变形效果
        li {

            //1,2 魔方的前后两个面
            &:nth-child(1) {
                //前面：相对于Z轴 向z轴正方向移动 0.5倍魔方宽度的距离            
                transform: translateZ(@V-1);
            }

            &:nth-child(2) {
                //后面：相对于Z轴 向z轴负方向移动 0.5倍魔方宽度的距离 ，并且绕X轴旋转180度
                transform: translateZ(@V-2) rotateY(180deg);

            }

            //3,4魔方的左右两个面
            &:nth-child(3) {
                transform: translateX(@V-2) rotateY(90deg);
            }

            &:nth-child(4) {
                transform: translateX(@V-1) rotateY(-90deg);
            }

            //5,6魔方的上下两个面
            &:nth-child(5) {
                transform: translateY(@V-2) rotateX(90deg);
            }

            &:nth-child(6) {
                transform: translateY(@V-1) rotateX(-90deg);
            }
        }

        //这样写完 没有3d效果 ，只有给cube 设置了旋转角度我们才能看到3d效果
        transform:scale(0.6) rotateX(45deg) rotateY(-60deg);
        //为了能让他自己动起来，加上自定义动画
        //animation: cubeAutoMove 5s linear 0s infinite both;
        transition: 0.3s; //=>后期让魔方旋转的时候有一个平稳的过渡动画效果

    }
}

@keyframes cubeAutoMove {

    0%,
    100% {
        transform: scale(0.6) rotateX(45deg) rotateY(-60deg);
    }

    50% {
        transform: scale(0.6) rotateX(235deg) rotateY(260deg);
    }
}

@keyframes cubeAutoMoveStop {

    0%,
    100% {
        transform: scale(0.6) rotateX(45deg) rotateY(-60deg);
    }
}



/*swiperBox*/
.detailBox {

    .swiper-container {
        height: 100%;
        overflow: hidden;


        .swiper-slide {
            position: relative; //每一个页面中的子元素，相对于自己的页面定位
            width: 100%;
            height: 100%;
            left: 0;
            top: 0;
            overflow: hidden;

            &:nth-child(1) {
                background: write;
            }

            &:nth-child(2) {
                background: #fff9c1;
            }

            &:nth-child(3) {
                background: green;
            }

            &:nth-child(4) {
                background: gray;
            }

            &:nth-child(5) {
                background: pink;
            }

            &:nth-child(6) {
                background: yellow;
            }


        }





    }

    //background: #0F0;

    //page1
    .page1 {
        dl {
            position: absolute;
            width: 5.4rem;
            height: 7.2rem;

            // margin-top: -2.7rem ;
            // margin-left: -3.6rem;
            //引入makisu插件后，这个插件会在实现3D折叠效果的父元素上设置transform:1200px;
            //这样操作后就会覆盖我们这里设置的transform属性的值，所以我们不用这个属性设置居中，换一种方式
            //left: 50%;
            //top: 50%;
            //transform: translate(-50%, -50%);

            //不知道宽高的情况实现居中
            /*
            left:0;
            top:0;
            right: 0;
            bottom: 0;
            margin: auto;
            */
            //知道宽高实现居中
            left: 50%;
            top: 50%;
            margin: -3.6rem 0 0 -2.7rem;

            dt,
            dd {
                box-sizing: border-box;
                height: 0.6rem;
                line-height: 0.6rem;
                background-color: #5cb85c;
            }

            dt {
                text-align: center;
                font-size: 0.4rem;
                color: #0F0;
            }

            dd {
                border-top: 0.02rem dashed rgba(255, 255, 255, .3);
                position: relative;

                em {
                    position: absolute;
                    margin-top: -.18rem;
                    width: .36rem;
                    height: .42rem;
                    left: .15rem;
                    top: 50%;
                    font-size: .2rem;
                    color: #fff;
                    font-style: normal;
                    background: red;
                    border-radius: 50%;
                    line-height: .42rem;
                    text-align: center;
                    // background: url("../img/zf_outline.png") no-repeat;
                    // background-size: 100% 100%;
                }

                a {
                    position: relative;
                    display: block;
                    margin-left: .66rem;
                    font-size: .28rem;
                    color: #000;

                    text-overflow: ellipsis;
                    white-space: nowrap;
                    overflow: hidden;

                }

                em,
                a {
                    z-index: 1000; //基于makisu实现3D折叠效果，为了保证内容不被makisu创建的span标签遮挡住，设置高级别的zindex
                }
            }
        }

    }


    //page2
    .page2 {
        position: relative;

        h2 {
            position: absolute;
            width: 100%;
            height: 0.9rem;
            line-height: 0.9rem;
            top: 0.8rem;
            color: #665c50;
            font-size: 0.6rem;
            text-align: center;
            font-weight: normal;

            opacity: 0;
        }

        img {
            display: block;
            position: absolute;
            widows: 1rem;
            height: 1rem;
            left: 50%;
            top: 50%;
            //transform: -0.5rem -0.5rem;
            margin: -.5rem 0 0 -0.5rem;

        }

        // img .monery{
        //     width: 1.32rem;
        //     height: 1.7rem;
        // }
        &:nth-last-of-type(1) {
            margin: -.85rem 0 0 -0.66rem;
            width: 1.32rem;
            height: 1.7rem;

        }

    }


   

}

 /*
   * 基于seiper实现切换到哪一个页卡，让哪一个页卡中的后代元素有动画效果
   *   1.除了编写正常的CSS样式(都写在.PAGE-X中)，把需要实现动画的元素所对应的动画写在#PAGE-X中(Id选择器优先级高)
   *   2.在swiper插件的某些回调函数中(例如:onTransitionEnd...)获取当前展示SLIDE的索引，根据索引为其设置对应的ID值，当前展示的SLIDE有ID，其余的没有ID
   *   3.为了保证切换到这一页面的时候，元素是动画运动出来的（也就是开始啥都看不见），每个元素都是基于动画显示的（在初始样式中.PAGE? 把所有需要运动的元素透明度设置为零  加ID后执行动画效果，在动画的最后一帧位置让透明度为1即可）
*/

#page2 {
    h2 {
        animation: bounceInLeft 1s both;
    }

    img {
        &:nth-last-of-type(1) {
          animation: shake 1s both;
        }
  
        &:not(:nth-last-of-type(1)) {
          opacity: 1;
          animation: tada 1s .5s infinite both;
        }
  
        &:nth-of-type(1) {
          margin-top: -2.9rem; /*-.5-2.4*/
        }
  
        &:nth-of-type(2) {
          margin-top: -1.7rem;
          margin-left: 1.5rem;
        }
  
        &:nth-of-type(3) {
          margin-top: .7rem;
          margin-left: 1.5rem;
        }
  
        &:nth-of-type(4) {
          margin-top: 1.9rem;
        }
  
        &:nth-of-type(5) {
          margin-top: .7rem;
          margin-left: -2.5rem;
        }
  
        &:nth-of-type(6) {
          margin-top: -1.7rem;
          margin-left: -2.5rem;
        }
      }
}


@keyframes bounceInLeft {

    from,
    60%,
    75%,
    90%,
    to {
        -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
        animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    }

    0% {
        opacity: 0;
        -webkit-transform: translate3d(-3000px, 0, 0);
        transform: translate3d(-3000px, 0, 0);
    }

    60% {
        opacity: 1;
        -webkit-transform: translate3d(25px, 0, 0);
        transform: translate3d(25px, 0, 0);
    }

    75% {
        -webkit-transform: translate3d(-10px, 0, 0);
        transform: translate3d(-10px, 0, 0);
    }

    90% {
        -webkit-transform: translate3d(5px, 0, 0);
        transform: translate3d(5px, 0, 0);
    }

    to {
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0);
        opacity: 1;
    }
}


@keyframes shake {

    from,
    to {
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0);
    }

    0% {
        opacity: 0;
    }

    100% {
        opacity: 1;
    }

    10%,
    30%,
    50%,
    70%,
    90% {
        -webkit-transform: translate3d(-10px, 0, 0);
        transform: translate3d(-10px, 0, 0);
    }

    20%,
    40%,
    60%,
    80% {
        -webkit-transform: translate3d(10px, 0, 0);
        transform: translate3d(10px, 0, 0);
    }
}

@keyframes tada {
    from {
        -webkit-transform: scale3d(1, 1, 1);
        transform: scale3d(1, 1, 1);
    }

    10%,
    20% {
        -webkit-transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg);
        transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg);
    }

    30%,
    50%,
    70%,
    90% {
        -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
        transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
    }

    40%,
    60%,
    80% {
        -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
        transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
    }

    to {
        -webkit-transform: scale3d(1, 1, 1);
        transform: scale3d(1, 1, 1);
    }
}